"use strict";(self.webpackChunklunar_loom_api_docs=self.webpackChunklunar_loom_api_docs||[]).push([[706],{4765:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=n(5893),a=n(1151);const i={title:"\ud83d\udce8 Receiving Messages",sidebar_position:5},r="Receiving Messages",o={id:"receive-messages",title:"\ud83d\udce8 Receiving Messages",description:"Discover how to handle incoming messages from the Qryptell WebSocket server in your client applications.",source:"@site/docs/websocket/receive-messages.md",sourceDirName:".",slug:"/receive-messages",permalink:"/Qryptell-api-docs/websocket/receive-messages",draft:!1,unlisted:!1,editUrl:"https://github.com/Qryptell/Qryptell-api-docs/edit/main/docs/websocket/receive-messages.md",tags:[],version:"current",lastUpdatedAt:1707845448,formattedLastUpdatedAt:"Feb 13, 2024",sidebarPosition:5,frontMatter:{title:"\ud83d\udce8 Receiving Messages",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udce4 Sending Messages",permalink:"/Qryptell-api-docs/websocket/send-messages"}},c={},l=[{value:"Message Format",id:"message-format",level:2},{value:"Handling messages",id:"handling-messages",level:2},{value:"Sample Messages",id:"sample-messages",level:2},{value:"User Message",id:"user-message",level:3},{value:"Acknowledgment Message",id:"acknowledgment-message",level:3}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"receiving-messages",children:"Receiving Messages"}),"\n",(0,t.jsx)(s.p,{children:"Discover how to handle incoming messages from the Qryptell WebSocket server in your client applications."}),"\n",(0,t.jsx)(s.h2,{id:"message-format",children:"Message Format"}),"\n",(0,t.jsx)(s.p,{children:"When your client application is connected to the WebSocket server, it can receive various types of messages, including user messages, system messages, and acknowledgment messages. Below is the format of the messages you can expect to receive:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "id": "message_id",\n  "from": "sender_username",\n  "to": "recipient_username"\n  "time": "2024-01-26T09:06:03Z",\n  "type": "USER_MSG",\n  "content": "TEXT_MESSAGE",\n  "message": "Hello, world!",\n}\n'})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Id:"})," Unique identifier of the message."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"From:"})," Sender of the message."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"To:"})," Recipient of the message."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Type:"})," Type of the message, such as USER_MSG, SYSTEM_MSG, or ACK_MSG."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Time:"})," Timestamp indicating when the message was sent."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Content:"})," Content type of the message, such as TEXT_MESSAGE or FILE_MESSAGE."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Message:"})," Content of the message."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"handling-messages",children:"Handling messages"}),"\n",(0,t.jsx)(s.p,{children:"Upon receiving a message from the WebSocket server, your client application should handle it appropriately based on the message\ntype and content. For instance, if it's a user message (USER_MSG), you might display it in the chat interface. If it's a system\nmessage (SYSTEM_MSG), you might show it as a notification to the user. And if it's an acknowledgment message (ACK_MSG), you\nmight update the status of the sent message."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"// Handle incoming messages from the WebSocket server\nsocket.addEventListener('message', function(event) {\n    const message = JSON.parse(event.data);\n\n    // Determine the type of message and take appropriate actions\n    switch(message.type) {\n        case 'USER_MSG':\n            // Handle user message\n            displayUserMessage(message);\n            break;\n        case 'SYSTEM_MSG':\n            // Handle system message\n            displaySystemMessage(message);\n            break;\n        case 'ACK_MSG':\n            // Handle acknowledgment message\n            handleAcknowledgment(message);\n            break;\n        default:\n            // Handle other message types\n            handleOtherMessage(message);\n            break;\n    }\n});\n"})}),"\n",(0,t.jsx)(s.p,{children:"Handling incoming messages from the WebSocket server is crucial for real-time communication in your client application. By\nunderstanding the message format and implementing appropriate handling logic, you can create a seamless and interactive user\nexperience."}),"\n",(0,t.jsx)(s.h2,{id:"sample-messages",children:"Sample Messages"}),"\n",(0,t.jsx)(s.p,{children:"Below are sample JSON messages representing a user message (USER_MSG) and an acknowledgment message (ACK_MSG) as they might be\nreceived from the WebSocket server:"}),"\n",(0,t.jsx)(s.h3,{id:"user-message",children:"User Message"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n    "id": "f3bd13e8-0cfb-4ef4-a7e2-f29fb43478d3",\n    "from": "john",\n    "to": "rick",\n    "type": "USER_MSG",\n    "time": "2024-01-26T09:06:03Z",\n    "content": "TEXT_MESSAGE",\n    "message": "hai"\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:'This message represents a user message where "hai" is sent from "john" to "rick" at the specified time.'}),"\n",(0,t.jsx)(s.h3,{id:"acknowledgment-message",children:"Acknowledgment Message"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n    "id": "23213123",\n    "from": "john",\n    "type": "ACK_MSG",\n    "time": "2024-01-26T09:06:03Z",\n    "content": "MESSAGE_RECEIVED",\n    "message": "f3bd13e8-0cfb-4ef4-a7e2-f29fb43478d3"\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:'This message represents an acknowledgment message where the server confirms that the message with the ID 232131232\nhas been received and processed by the server at the specified time and the new id of the message created by server\nis "f3bd13e8-0cfb-4ef4-a7e2-f29fb43478d3".'}),"\n",(0,t.jsx)(s.p,{children:"These sample messages serve to illustrate the structure and content of user and acknowledgment messages exchanged between\nclients and the WebSocket server. Adjustments can be made according to the specific message formats and requirements of your\napplication."})]})}function m(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>o,a:()=>r});var t=n(7294);const a={},i=t.createContext(a);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);